// Generated by CoffeeScript 1.11.1
$.fn.extend({
  minitypeahead: function(settings) {
    var filter, master_array, obj;
    if ((settings.dataset == null) || (settings.keys == null)) {
      return;
    }
    $.each(settings, (function(_this) {
      return function(key, value) {
        if (key !== 'dataset') {
          _this.data(key, value);
        }
      };
    })(this));
    master_array = [];
    $.each(settings.keys, function(i, keyname) {
      master_array[keyname] = [];
      $.each(settings.dataset, function(j, object) {
        var index, key, l, pre_key, ref, ref1, str;
        pre_key = object[keyname].toLowerCase().latinize().split(" ");
        $.each(pre_key, function(k, str) {
          var index, key, l, ref;
          for (index = l = 1, ref = str.length; 1 <= ref ? l <= ref : l >= ref; index = 1 <= ref ? ++l : --l) {
            key = str.substring(0, index);
            if (master_array[keyname][key] == null) {
              master_array[keyname][key] = [];
            }
            if ($.inArray(object, master_array[keyname][key]) === -1) {
              master_array[keyname][key].push(object);
            }
          }
        });
        str = pre_key.join(" ");
        for (index = l = ref = pre_key[0].length + 1, ref1 = str.length; ref <= ref1 ? l <= ref1 : l >= ref1; index = ref <= ref1 ? ++l : --l) {
          key = str.substring(0, index);
          if (master_array[keyname][key] == null) {
            master_array[keyname][key] = [];
          }
          if ($.inArray(object, master_array[keyname][key]) === -1) {
            master_array[keyname][key].push(object);
          }
        }
      });
    });
    this.data('dataset', master_array);
    filter = function(event) {
      var dataset, keys, notfound, query, returnset, success, target;
      keys = $(event.target).data('keys');
      dataset = $(event.target).data('dataset');
      target = $(event.target).data('target');
      notfound = $(event.target).data('notfound');
      success = $(event.target).data('success');
      query = $(event.target).val().toLowerCase().latinize();
      if (query.length < 2) {
        if (notfound != null) {
          notfound.call(event.target);
        }
        return;
      }
      returnset = [];
      $.each(keys, function(i, key) {
        if (dataset[key][query] != null) {
          returnset = returnset.concat(dataset[key][query]);
        }
      });
      if ((success != null) && returnset.length !== 0) {
        return success.call(event.target, returnset);
      } else if (notfound != null) {
        return notfound.call(event.target);
      }
    };
    this.keyup(filter);
    obj = {
      target: this
    };
    return filter(obj);
  }
});
